
# 基于训练好的词向量模型进行聚类
# 聚类采用Kmeans算法
import math
import re
import json
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict


# 输入模型文件路径
# 加载训练好的模型
def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model


def load_sentence(path):
    sentences = set()
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.add(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences


# 将文本向量化
def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()  # sentence是分好词的，空格分开
        vector = np.zeros(model.vector_size)
        # 所有词的向量相加求平均，作为句子向量
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                # 部分词在训练中未出现，用全0向量代替
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)


# 计算类内平均距离
def calculate_intra_cluster_distances(vectors, labels, centers):
    cluster_distances = defaultdict(list)

    # 计算每个样本到其簇中心的距离
    for i, vector in enumerate(vectors):
        label = labels[i]
        center = centers[label]
        # 计算欧氏距离
        distance = np.linalg.norm(vector - center)
        cluster_distances[label].append(distance)

    # 计算每个簇的平均距离
    avg_distances = {}
    for label, distances in cluster_distances.items():
        avg_distances[label] = np.mean(distances)

    return avg_distances


def main():
    model = load_word2vec_model(
        r"D:\BaiduNetdiskDownload\第五周 词向量及文本向量\week5 词向量及文本向量\model.w2v")  # 加载词向量模型
    sentences = load_sentence("titles.txt")  # 加载所有标题
    vectors = sentences_to_vectors(sentences, model)  # 将所有标题向量化

    n_clusters = int(math.sqrt(len(sentences)))  # 指定聚类数量
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters, n_init=10)  # 定义一个kmeans计算类
    kmeans.fit(vectors)  # 进行聚类计算

    # 计算类内平均距离
    avg_distances = calculate_intra_cluster_distances(vectors, kmeans.labels_, kmeans.cluster_centers_)

    # 按平均距离排序
    sorted_clusters = sorted(avg_distances.items(), key=lambda x: x[1])

    # 计算所有簇的平均距离的中位数作为阈值
    all_distances = [d for _, d in sorted_clusters]
    median_distance = np.median(all_distances)

    print("\n===== 聚类结果排序 =====")
    print(f"{'聚类编号':<10}{'类内平均距离':<15}{'保留/舍弃':<10}")
    for label, distance in sorted_clusters:
        status = "保留" if distance <= median_distance else "舍弃"
        print(f"{label:<10}{distance:<15.4f}{status:<10}")

    # 分组存储句子
    sentence_label_dict = defaultdict(list)
    for sentence, label in zip(sentences, kmeans.labels_):
        sentence_label_dict[label].append(sentence)

    # 打印保留的聚类
    print("\n===== 保留的聚类 =====")
    for label, distance in sorted_clusters:
        if distance > median_distance:
            continue

        print(f"\ncluster {label} (平均距离: {distance:.4f}):")
        cluster_sentences = sentence_label_dict[label]
        for i in range(min(10, len(cluster_sentences))):
            print(cluster_sentences[i].replace(" ", ""))

    # 打印舍弃的聚类
    print("\n===== 舍弃的聚类 =====")
    for label, distance in sorted_clusters:
        if distance <= median_distance:
            continue

        print(f"\ncluster {label} (平均距离: {distance:.4f}):")
        cluster_sentences = sentence_label_dict[label]
        for i in range(min(10, len(cluster_sentences))):
            print(cluster_sentences[i].replace(" ", ""))

    # 打印统计信息
    discarded_clusters = [label for label, d in sorted_clusters if d > median_distance]
    kept_clusters = [label for label, d in sorted_clusters if d <= median_distance]
    print("\n===== 统计信息 =====")
    print(f"聚类总数: {n_clusters}")
    print(f"保留聚类数: {len(kept_clusters)}")
    print(f"舍弃聚类数: {len(discarded_clusters)}")
    print(f"保留的聚类编号: {kept_clusters}")
    print(f"舍弃的聚类编号: {discarded_clusters}")


if __name__ == "__main__":
    main()
