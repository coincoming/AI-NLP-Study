# #!/usr/bin/env python3
# #coding: utf-8
#
# #基于训练好的词向量模型进行聚类
# #聚类采用Kmeans算法
# import math
# import re
# import json
# import jieba
# import numpy as np
# from gensim.models import Word2Vec
# from sklearn.cluster import KMeans
# from collections import defaultdict
# from scipy.spatial.distance import euclidean
#
# #输入模型文件路径
# #加载训练好的模型
# def load_word2vec_model(path):
#     model = Word2Vec.load(path)
#     return model
#
# def load_sentence(path):
#     sentences = set()
#     with open(path, encoding="utf8") as f:
#         for line in f:
#             sentence = line.strip()
#             sentences.add(" ".join(jieba.cut(sentence)))
#     print("获取句子数量：", len(sentences))
#     return sentences
#
# #将文本向量化
# def sentences_to_vectors(sentences, model):
#     vectors = []
#     for sentence in sentences:
#         words = sentence.split()  #sentence是分好词的，空格分开
#         vector = np.zeros(model.vector_size)
#         #所有词的向量相加求平均，作为句子向量
#         for word in words:
#             try:
#                 vector += model.wv[word]
#             except KeyError:
#                 #部分词在训练中未出现，用全0向量代替
#                 vector += np.zeros(model.vector_size)
#         vectors.append(vector / len(words))
#     return np.array(vectors)
#
# def calculate_class_distances(kmeans, vectors):
#     # 获取每个类的中心点
#     cluster_centers = kmeans.cluster_centers_
#     n_clusters = len(cluster_centers)
#     # 创建一个距离矩阵
#     distance_matrix = np.zeros((n_clusters, n_clusters))
#     for i in range(n_clusters):
#         for j in range(i + 1, n_clusters):
#             distance = euclidean(cluster_centers[i], cluster_centers[j])
#             distance_matrix[i][j] = distance
#             distance_matrix[j][i] = distance
#     return distance_matrix
#
#
# def main():
#     model = load_word2vec_model(r"F:\BaiduNetdiskDownload\第五周\八斗精品班\week5 词向量及文本向量\week5 词向量及文本向量\model.w2v") #加载词向量模型
#     sentences = load_sentence("titles.txt")  #加载所有标题
#     vectors = sentences_to_vectors(sentences, model)   #将所有标题向量化
#     n_clusters = int(math.sqrt(len(sentences)))  #指定聚类数量
#     print("指定聚类数量：", n_clusters)
#     kmeans = KMeans(n_clusters)  #定义一个kmeans计算类
#     kmeans.fit(vectors)          #进行聚类计算
#
#     sentence_label_dict = defaultdict(list)
#     for sentence, label in zip(sentences, kmeans.labels_):  #取出句子和标签
#         sentence_label_dict[label].append(sentence)         #同标签的放到一起
#     for label, sentences in sentence_label_dict.items():
#         print("cluster %s :" % label)
#         for i in range(min(10, len(sentences))):  #随便打印几个，太多了看不过来
#             print(sentences[i].replace(" ", ""))
#         print("---------")
#     # 计算类类距离
#     distance_matrix = calculate_class_distances(kmeans, vectors)
#     print("类类距离矩阵：")
#     print(distance_matrix)
#
#
#
#
# if __name__ == "__main__":
#     main()
#
#!/usr/bin/env python3
#coding: utf-8

#基于训练好的词向量模型进行聚类
#聚类采用Kmeans算法
import math
import re
import json
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict
from scipy.spatial.distance import euclidean

#输入模型文件路径
#加载训练好的模型
def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model

def load_sentence(path):
    sentences = set()
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.add(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences

#将文本向量化
def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()  #sentence是分好词的，空格分开
        vector = np.zeros(model.vector_size)
        #所有词的向量相加求平均，作为句子向量
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                #部分词在训练中未出现，用全0向量代替
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)

#计算类类距离
def calculate_class_distances(kmeans, vectors):
    # 获取每个类的中心点
    cluster_centers = kmeans.cluster_centers_
    n_clusters = len(cluster_centers)
    # 创建一个距离矩阵
    distance_matrix = np.zeros((n_clusters, n_clusters))
    for i in range(n_clusters):
        for j in range(i + 1, n_clusters):
            distance = euclidean(cluster_centers[i], cluster_centers[j])
            distance_matrix[i][j] = distance
            distance_matrix[j][i] = distance
    return distance_matrix

#根据聚类中心之间的平均距离对聚类进行排序
def sort_clusters_by_distance(kmeans, distance_matrix):
    n_clusters = len(kmeans.cluster_centers_)
    # 计算每个聚类中心到其他聚类中心的平均距离
    average_distances = np.mean(distance_matrix, axis=1)
    # 根据平均距离对聚类进行排序
    sorted_indices = np.argsort(average_distances)
    sorted_indices = sorted_indices[::-1]
    return sorted_indices

def main():
    model = load_word2vec_model(r"F:\BaiduNetdiskDownload\第五周\八斗精品班\week5 词向量及文本向量\week5 词向量及文本向量\model.w2v") #加载词向量模型
    sentences = load_sentence("titles.txt")  #加载所有标题
    vectors = sentences_to_vectors(sentences, model)   #将所有标题向量化
    n_clusters = int(math.sqrt(len(sentences)))  #指定聚类数量
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters)  #定义一个kmeans计算类
    kmeans.fit(vectors)          #进行聚类计算

    sentence_label_dict = defaultdict(list)
    for sentence, label in zip(sentences, kmeans.labels_):  #取出句子和标签
        sentence_label_dict[label].append(sentence)         #同标签的放到一起

    # 计算类类距离
    distance_matrix = calculate_class_distances(kmeans, vectors)
    print("类类距离矩阵：")
    print(distance_matrix)

    # 根据聚类中心之间的平均距离对聚类进行排序
    sorted_indices = sort_clusters_by_distance(kmeans, distance_matrix)
    print("排序后的聚类索引：", sorted_indices)

    # 按照排序后的索引打印聚类结果
    for label in sorted_indices:
        print("cluster %s :" % label)
        sentences_in_cluster = sentence_label_dict[label]
        for i in range(min(10, len(sentences_in_cluster))):  #随便打印几个，太多了看不过来
            print(sentences_in_cluster[i].replace(" ", ""))
        print("---------")

if __name__ == "__main__":
    main()
