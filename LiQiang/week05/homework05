#!/usr/bin/env python3
# coding: utf-8

# 基于训练好的词向量模型进行聚类
# 聚类采用Kmeans算法
import math
import re
import json
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict


# 输入模型文件路径
# 加载训练好的模型
def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model


def load_sentence(path):
    sentences = set()
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.add(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences


# 将文本向量化
def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()  # sentence是分好词的，空格分开
        vector = np.zeros(model.vector_size)
        # 所有词的向量相加求平均，作为句子向量
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                # 部分词在训练中未出现，用全0向量代替
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)


# 计算向量与中心点的欧氏距离
def compute_distance(vector, center):
    return np.linalg.norm(vector - center)


def main():
    model = load_word2vec_model(r"D:\八斗\job\week5 词向量及文本向量\week5 词向量及文本向量\model.w2v")  # 加载词向量模型
    sentences = load_sentence(r"D:\八斗\job\week5 词向量及文本向量\week5 词向量及文本向量\titles.txt")  # 加载所有标题
    vectors = sentences_to_vectors(sentences, model)  # 将所有标题向量化

    n_clusters = int(math.sqrt(len(sentences)))  # 指定聚类数量
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters)  # 定义一个kmeans计算类
    kmeans.fit(vectors)  # 进行聚类计算

    # 计算每个类别的平均距离
    cluster_distances = defaultdict(list)
    for sentence, vector, label in zip(sentences, vectors, kmeans.labels_):
        distance = compute_distance(vector, kmeans.cluster_centers_[label])
        cluster_distances[label].append((sentence, distance))

    # 计算每个类别的平均距离并排序
    cluster_avg_distances = []
    for label, sentence_distances in cluster_distances.items():
        avg_distance = sum(d for _, d in sentence_distances) / len(sentence_distances)
        cluster_avg_distances.append((label, avg_distance, sentence_distances))

    # 按平均距离排序
    cluster_avg_distances.sort(key=lambda x: x[1])

    # 输出排序结果
    for label, avg_distance, sentence_distances in cluster_avg_distances:
        print(f"Cluster {label} (平均距离: {avg_distance:.4f}):")
        # 按距离排序类内句子
        sentence_distances.sort(key=lambda x: x[1])
        for i in range(min(10, len(sentence_distances))):
            sentence, distance = sentence_distances[i]
            print(f"  {sentence.replace(' ', '')} (距离: {distance:.4f})")
        print("-" * 50)


if __name__ == "__main__":
    main()
