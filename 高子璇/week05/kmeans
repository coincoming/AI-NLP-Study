import numpy as np
import random
import sys


class KMeansClusterer:
    def __init__(self, ndarray, cluster_num):
        self.ndarray = ndarray
        self.cluster_num = cluster_num
        self.points = self.__pick_start_point(ndarray, cluster_num)

    def cluster(self):
        result = []  # 存储每个簇的点
        distances = []  # 存储每个簇中点到中心的距离
        for i in range(self.cluster_num):
            result.append([])
            distances.append([])

        for item in self.ndarray:
            distance_min = sys.maxsize
            index = -1
            for i in range(len(self.points)):
                distance = self.__distance(item, self.points[i])
                if distance < distance_min:
                    distance_min = distance
                    index = i
            result[index].append(item.tolist())
            distances[index].append(distance_min)  # 记录该点到最近中心的距离

        new_center = []
        for item in result:
            new_center.append(self.__center(item).tolist())

        # 如果中心不再变化，结束迭代
        if (self.points == new_center).all():
            sum_total = self.__sumdis(result)
            return result, self.points, sum_total, distances  # 返回时包含距离信息

        self.points = np.array(new_center)
        return self.cluster()

    def sort_clusters_by_distance(self, result, distances):
        """
        对每个簇内的点按类内距离排序（升序）
        :param result: 原始聚类结果
        :param distances: 每个点到中心的距离
        :return: 排序后的聚类结果
        """
        sorted_result = []
        for i in range(self.cluster_num):
            # 将每个簇的点和对应的距离组合成元组
            combined = list(zip(distances[i], result[i]))
            # 按照距离排序（升序）
            combined.sort(key=lambda x: x[0])
            # 提取排序后的点
            sorted_points = [point for _, point in combined]
            sorted_result.append(sorted_points)
        return sorted_result

    # 计算总距离
    def __sumdis(self, result):
        total = 0
        for i in range(len(self.points)):
            for j in range(len(result[i])):
                total += self.__distance(result[i][j], self.points[i])
        return total

    # 计算中心点
    def __center(self, lst):
        return np.mean(lst, axis=0)

    # 欧氏距离
    def __distance(self, p1, p2):
        return np.sqrt(sum((a - b) ** 2 for a, b in zip(p1, p2)))

    # 随机选取初始中心点
    def __pick_start_point(self, ndarray, cluster_num):
        if cluster_num < 0 or cluster_num > ndarray.shape[0]:
            raise Exception("簇数设置有误")
        indexes = random.sample(list(range(ndarray.shape[0])), cluster_num)
        return np.array([ndarray[i] for i in indexes])


# =============================

if __name__ == "__main__":
    x = np.random.rand(100, 8)
    kmeans = KMeansClusterer(x, 10)
    result, centers, total_dis, distances = kmeans.cluster()

    print("原始聚类结果：")
    for i, cluster in enumerate(result):
        print(f"Cluster {i}: {cluster}")

    print("\n类内距离：")
    for i, d in enumerate(distances):
        print(f"Cluster {i} distances: {d}")

    # 排序每个簇内部的点
    sorted_clusters = kmeans.sort_clusters_by_distance(result, distances)

    print("\n按类内距离排序后的聚类结果：")
    for i, cluster in enumerate(sorted_clusters):
        print(f"Cluster {i}: {cluster}")
